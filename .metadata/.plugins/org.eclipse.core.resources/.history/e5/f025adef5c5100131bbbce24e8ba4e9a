package Actions;


import java.util.regex.Matcher;
import java.util.regex.Pattern;

import Parts.*;

public class CommandTranslator
{

	/**
	 * @param args
	 */

		public static String acceptCommands(String command)
		{
			String result = "";
			Pattern tomatch = Pattern.compile("[QKNRBP][dl][a-g][1-8]");
			Matcher piece = tomatch.matcher(command);
			if(piece.find())
			{
				result = placePiece(command);
			}
			tomatch = Pattern.compile("[a-g][1-8] [a-g][1-8]");
			piece = tomatch.matcher(command);
			if(piece.find())
			{
				result = movePiece(command);
			}
			if(result.equals(""))
			{
				result = otherMove(command);
			}
					
					return result;
		}
		
		private static String placePiece(String command)
		{
			char Type = command.charAt(0);
			char Color = command.charAt(1);
			String loc = command.substring(2);
			Piece placed = pieceaddition(Type,Color,loc);
			return placed.getColor() + " " + placed.getName() + " has been placed at " + placed.getLocation();
		}
		private static String movePiece(String command)
		{
			String happened = "";
			String primeloc = command.substring(0,2);
			String secondloc = command.substring(3);
			boolean valid = false;
			Piece moved = null;
			for(Piece p : PlayGame.Pieces)
			{
				if( p.getLocation().equals(primeloc))
				{
					valid = true;
					moved = p;
				}
			}
			if(valid)
			{
				happened = "piece on " + primeloc + " moved to " + secondloc;
				moved.setLocation(secondloc);
			}else
			{
				happened = "There is no piece to move!";
			}
			
			return happened;
		}
		private static String otherMove(String command)
		{
			
			return "piece moved oddly";
		}
		private static Piece pieceaddition(char type, char side, String loc)
		{
			Piece toadd;
			switch(Character.toUpperCase(type))
			{
				case 'Q':
					toadd= new Queen(side,loc);
					break;
				case 'K':
					toadd= new King(side,loc);
					break;
				case 'N':
					toadd= new Knight(side,loc);
					break;
				case 'R':
					toadd = new Rook(side,loc);
					break;
				case 'B':
					toadd = new Bishop(side,loc);
					break;
				default:
					toadd = new Pawn(side,loc);
					break;	
			}
			PlayGame.Pieces.add(toadd);
			return toadd;
		}

}
